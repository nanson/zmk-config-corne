/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        settings_layer {
            bindings = <&mo 3>;
            key-positions = <37 40>;
        };

        delete {
            bindings = <&kp DEL>;
            key-positions = <11 41>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB              &kp Q  &kp W  &kp E     &kp R         &kp T          &kp Y        &kp U                 &kp I                      &kp O    &kp P     &kp BACKSPACE
&mt LEFT_SHIFT CAPS  &kp A  &kp S  &kp D     &kp F         &kp G          &kp H        &kp J                 &kp K                      &kp L    &kp SEMI  &kp SQT
&kp LEFT_CONTROL     &kp Z  &kp X  &kp C     &kp V         &kp B          &kp N        &kp M                 &kp COMMA                  &kp DOT  &kp FSLH  &kp ESCAPE
                                   &kp LCMD  &lt 1 C_MENU  &lt 2 SPACE    &lt 2 ENTER  &lt 1 K_CONTEXT_MENU  &mt LEFT_ALT LEFT_BRACKET
            >;
        };

        numbers_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans   &kp N1  &kp N2  &kp N3     &kp N4   &kp N5       &kp N6    &kp N7    &kp N8  &kp N9     &kp N0   &trans
&trans   &trans  &trans  &kp COLON  &kp DOT  &kp COMMA    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans   &trans
&kp F12  &kp F1  &kp F2  &kp F3     &kp F4   &kp F5       &kp F6    &kp F7    &kp F8  &kp F9     &kp F10  &kp F11
                         &trans     &trans   &trans       &trans    &trans    &trans
            >;
        };

        symbols_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TILDE  &kp EXCL   &kp AT    &kp HASH       &kp DLLR          &kp PERCENT    &kp ASTERISK  &kp LPAR          &kp RPAR  &kp MINUS      &kp EQUAL     &trans
&trans     &kp CARET  &kp AMPS  &kp PLUS       &kp MINUS         &kp UNDER      &kp GRAVE     &kp LEFT_BRACKET  &kp RBKT  &kp SLASH      &kp COLON     &trans
&trans     &trans     &kp PIPE  &kp LESS_THAN  &kp GREATER_THAN  &kp DOT        &kp COMMA     &kp LBRC          &kp RBRC  &kp BACKSLASH  &kp QUESTION  &trans
                                &trans         &trans            &trans         &trans        &trans            &trans
            >;
        };

        settings_layer {
            bindings = <
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans        &trans        &trans      &trans  &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_MUTE  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans        &trans        &trans      &trans  &trans
                                        &trans        &trans        &trans          &trans  &trans        &trans
            >;
        };
    };
};
